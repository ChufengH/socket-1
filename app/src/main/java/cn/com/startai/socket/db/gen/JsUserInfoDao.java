package cn.com.startai.socket.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.startai.socket.mutual.js.bean.JsUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JS_USER_INFO".
*/
public class JsUserInfoDao extends AbstractDao<JsUserInfo, Long> {

    public static final String TABLENAME = "JS_USER_INFO";

    /**
     * Properties of entity JsUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Email = new Property(0, String.class, "email", false, "EMAIL");
        public final static Property Mobile = new Property(1, String.class, "mobile", false, "MOBILE");
        public final static Property IsHavePwd = new Property(2, int.class, "isHavePwd", false, "IS_HAVE_PWD");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Province = new Property(5, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(6, String.class, "city", false, "CITY");
        public final static Property Town = new Property(7, String.class, "town", false, "TOWN");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property NickName = new Property(9, String.class, "nickName", false, "NICK_NAME");
        public final static Property HeadPic = new Property(10, String.class, "headPic", false, "HEAD_PIC");
        public final static Property Sex = new Property(11, String.class, "sex", false, "SEX");
        public final static Property FirstName = new Property(12, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(13, String.class, "lastName", false, "LAST_NAME");
        public final static Property Userid = new Property(14, String.class, "userid", false, "USERID");
        public final static Property ThirdInfosJson = new Property(15, String.class, "thirdInfosJson", false, "THIRD_INFOS_JSON");
        public final static Property Id = new Property(16, Long.class, "id", true, "_id");
    }


    public JsUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public JsUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JS_USER_INFO\" (" + //
                "\"EMAIL\" TEXT," + // 0: email
                "\"MOBILE\" TEXT," + // 1: mobile
                "\"IS_HAVE_PWD\" INTEGER NOT NULL ," + // 2: isHavePwd
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"PROVINCE\" TEXT," + // 5: province
                "\"CITY\" TEXT," + // 6: city
                "\"TOWN\" TEXT," + // 7: town
                "\"ADDRESS\" TEXT," + // 8: address
                "\"NICK_NAME\" TEXT," + // 9: nickName
                "\"HEAD_PIC\" TEXT," + // 10: headPic
                "\"SEX\" TEXT," + // 11: sex
                "\"FIRST_NAME\" TEXT," + // 12: firstName
                "\"LAST_NAME\" TEXT," + // 13: lastName
                "\"USERID\" TEXT," + // 14: userid
                "\"THIRD_INFOS_JSON\" TEXT," + // 15: thirdInfosJson
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT );"); // 16: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JS_USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JsUserInfo entity) {
        stmt.clearBindings();
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(1, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(2, mobile);
        }
        stmt.bindLong(3, entity.getIsHavePwd());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(7, city);
        }
 
        String town = entity.getTown();
        if (town != null) {
            stmt.bindString(8, town);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(10, nickName);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(11, headPic);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(12, sex);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(13, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(14, lastName);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(15, userid);
        }
 
        String thirdInfosJson = entity.getThirdInfosJson();
        if (thirdInfosJson != null) {
            stmt.bindString(16, thirdInfosJson);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(17, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JsUserInfo entity) {
        stmt.clearBindings();
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(1, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(2, mobile);
        }
        stmt.bindLong(3, entity.getIsHavePwd());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(7, city);
        }
 
        String town = entity.getTown();
        if (town != null) {
            stmt.bindString(8, town);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(10, nickName);
        }
 
        String headPic = entity.getHeadPic();
        if (headPic != null) {
            stmt.bindString(11, headPic);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(12, sex);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(13, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(14, lastName);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(15, userid);
        }
 
        String thirdInfosJson = entity.getThirdInfosJson();
        if (thirdInfosJson != null) {
            stmt.bindString(16, thirdInfosJson);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(17, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16);
    }    

    @Override
    public JsUserInfo readEntity(Cursor cursor, int offset) {
        JsUserInfo entity = new JsUserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // email
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mobile
            cursor.getInt(offset + 2), // isHavePwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // town
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nickName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // headPic
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sex
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // firstName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lastName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // thirdInfosJson
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JsUserInfo entity, int offset) {
        entity.setEmail(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMobile(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsHavePwd(cursor.getInt(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTown(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNickName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHeadPic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSex(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFirstName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLastName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setThirdInfosJson(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JsUserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JsUserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JsUserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
