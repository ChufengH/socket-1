package cn.com.startai.socket.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.startai.socket.sign.scm.bean.PowerCountdown;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POWER_COUNTDOWN".
*/
public class PowerCountdownDao extends AbstractDao<PowerCountdown, Long> {

    public static final String TABLENAME = "POWER_COUNTDOWN";

    /**
     * Properties of entity PowerCountdown.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, boolean.class, "status", false, "STATUS");
        public final static Property SwitchGear = new Property(2, boolean.class, "switchGear", false, "SWITCH_GEAR");
        public final static Property Hour = new Property(3, int.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(4, int.class, "minute", false, "MINUTE");
        public final static Property SysTime = new Property(5, long.class, "sysTime", false, "SYS_TIME");
        public final static Property Mac = new Property(6, String.class, "mac", false, "MAC");
    }


    public PowerCountdownDao(DaoConfig config) {
        super(config);
    }
    
    public PowerCountdownDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POWER_COUNTDOWN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" INTEGER NOT NULL ," + // 1: status
                "\"SWITCH_GEAR\" INTEGER NOT NULL ," + // 2: switchGear
                "\"HOUR\" INTEGER NOT NULL ," + // 3: hour
                "\"MINUTE\" INTEGER NOT NULL ," + // 4: minute
                "\"SYS_TIME\" INTEGER NOT NULL ," + // 5: sysTime
                "\"MAC\" TEXT);"); // 6: mac
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POWER_COUNTDOWN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PowerCountdown entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatus() ? 1L: 0L);
        stmt.bindLong(3, entity.getSwitchGear() ? 1L: 0L);
        stmt.bindLong(4, entity.getHour());
        stmt.bindLong(5, entity.getMinute());
        stmt.bindLong(6, entity.getSysTime());
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(7, mac);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PowerCountdown entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatus() ? 1L: 0L);
        stmt.bindLong(3, entity.getSwitchGear() ? 1L: 0L);
        stmt.bindLong(4, entity.getHour());
        stmt.bindLong(5, entity.getMinute());
        stmt.bindLong(6, entity.getSysTime());
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(7, mac);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PowerCountdown readEntity(Cursor cursor, int offset) {
        PowerCountdown entity = new PowerCountdown( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // status
            cursor.getShort(offset + 2) != 0, // switchGear
            cursor.getInt(offset + 3), // hour
            cursor.getInt(offset + 4), // minute
            cursor.getLong(offset + 5), // sysTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // mac
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PowerCountdown entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.getShort(offset + 1) != 0);
        entity.setSwitchGear(cursor.getShort(offset + 2) != 0);
        entity.setHour(cursor.getInt(offset + 3));
        entity.setMinute(cursor.getInt(offset + 4));
        entity.setSysTime(cursor.getLong(offset + 5));
        entity.setMac(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PowerCountdown entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PowerCountdown entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PowerCountdown entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
